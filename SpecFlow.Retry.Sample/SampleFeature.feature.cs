// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlow.Retry.Sample
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("SampleFeature", SourceFile="SampleFeature.feature", SourceLine=1)]
    public partial class SampleFeatureFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "SampleFeature", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void AddTwoNumbersSample(string name, string[] exampleTags)
        {
            System.Exception lastException = null;
            string configRetryCount = System.Configuration.ConfigurationManager.AppSettings["retryCount"];
            int retryCount = 0;
            if ((string.IsNullOrEmpty(configRetryCount) != true))
            {
                retryCount = System.Convert.ToInt32(configRetryCount);
            }
            for (int i = 0; (i <= retryCount); i = (i + 1))
            {
                try
                {
                    this.AddTwoNumbersSampleInternal(name, exampleTags);
                    return;
                }
                catch (System.Exception exc)
                {
                    lastException = exc;
                }
                if (((i + 1) 
                            <= retryCount))
                {
                    testRunner.OnScenarioEnd();
                }
            }
            if ((lastException != null))
            {
                throw lastException;
            }
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Add two numbers Sample, Person 1", new string[] {
                "HA-100"}, SourceLine=7)]
        public virtual void AddTwoNumbersSample_Person1()
        {
            this.AddTwoNumbersSample("Person 1", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Add two numbers Sample, Person 2", new string[] {
                "HA-100"}, SourceLine=8)]
        public virtual void AddTwoNumbersSample_Person2()
        {
            this.AddTwoNumbersSample("Person 2", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Add two numbers Sample, Person 3", new string[] {
                "HA-100"}, SourceLine=9)]
        public virtual void AddTwoNumbersSample_Person3()
        {
            this.AddTwoNumbersSample("Person 3", ((string[])(null)));
        }
        
        private void AddTwoNumbersSampleInternal(string name, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "HA-100"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add two numbers Sample", @__tags);
            this.ScenarioSetup(scenarioInfo);
            testRunner.Given(string.Format("\"{0}\" failed in exam", name), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
            TechTalk.SpecFlow.ScenarioContext.Current["ScenarioExample"] = name;
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Add two numbers  without examples Sample", new string[] {
                "HA-200"}, SourceLine=13)]
        public virtual void AddTwoNumbersWithoutExamplesSample()
        {
            System.Exception lastException = null;
            string configRetryCount = System.Configuration.ConfigurationManager.AppSettings["retryCount"];
            int retryCount = 0;
            if ((string.IsNullOrEmpty(configRetryCount) != true))
            {
                retryCount = System.Convert.ToInt32(configRetryCount);
            }
            for (int i = 0; (i <= retryCount); i = (i + 1))
            {
                try
                {
                    this.AddTwoNumbersWithoutExamplesSampleInternal();
                    return;
                }
                catch (System.Exception exc)
                {
                    lastException = exc;
                }
                if (((i + 1) 
                            <= retryCount))
                {
                    testRunner.OnScenarioEnd();
                }
            }
            if ((lastException != null))
            {
                throw lastException;
            }
        }
        
        private void AddTwoNumbersWithoutExamplesSampleInternal()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add two numbers  without examples Sample", new string[] {
                        "HA-200"});
            this.ScenarioSetup(scenarioInfo);
            testRunner.Given("\"Person 1\" failed in exam", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
            TechTalk.SpecFlow.ScenarioContext.Current["ScenarioExample"] = "";
            this.ScenarioCleanup();
        }
        
        public virtual void AddTwoNumbers2Sample(string name, string designation, string[] exampleTags)
        {
            System.Exception lastException = null;
            string configRetryCount = System.Configuration.ConfigurationManager.AppSettings["retryCount"];
            int retryCount = 0;
            if ((string.IsNullOrEmpty(configRetryCount) != true))
            {
                retryCount = System.Convert.ToInt32(configRetryCount);
            }
            for (int i = 0; (i <= retryCount); i = (i + 1))
            {
                try
                {
                    this.AddTwoNumbers2SampleInternal(name, designation, exampleTags);
                    return;
                }
                catch (System.Exception exc)
                {
                    lastException = exc;
                }
                if (((i + 1) 
                            <= retryCount))
                {
                    testRunner.OnScenarioEnd();
                }
            }
            if ((lastException != null))
            {
                throw lastException;
            }
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Add two numbers2 Sample, Person 1", new string[] {
                "HA-300"}, SourceLine=21)]
        public virtual void AddTwoNumbers2Sample_Person1()
        {
            this.AddTwoNumbers2Sample("Person 1", "Developer2", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Add two numbers2 Sample, Person 2", new string[] {
                "HA-300"}, SourceLine=22)]
        public virtual void AddTwoNumbers2Sample_Person2()
        {
            this.AddTwoNumbers2Sample("Person 2", "Developer2", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Add two numbers2 Sample, Person 3", new string[] {
                "HA-300"}, SourceLine=23)]
        public virtual void AddTwoNumbers2Sample_Person3()
        {
            this.AddTwoNumbers2Sample("Person 3", "Director2", ((string[])(null)));
        }
        
        private void AddTwoNumbers2SampleInternal(string name, string designation, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "HA-300"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add two numbers2 Sample", @__tags);
            this.ScenarioSetup(scenarioInfo);
            testRunner.Given(string.Format("\"{0}\" failed in exam", name), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
            TechTalk.SpecFlow.ScenarioContext.Current["ScenarioExample"] = name;
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
